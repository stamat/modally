{
  "version": 3,
  "sources": ["../node_modules/book-of-spells/src/helpers.mjs", "../node_modules/book-of-spells/src/dom.mjs", "../node_modules/book-of-spells/src/browser.mjs", "../modally.mjs", "../build/iife.js"],
  "sourcesContent": ["/**\n * Shallow merges two objects together. Used to pass simple options to functions.\n * \n * @param {object} target The target object to merge into\n * @param {object} source The source object to merge from\n * @returns object The merged object\n * @example\n * const target = { foo: 'bar' }\n * const source = { bar: 'baz' }\n * shallowMerge(target, source) // { foo: 'bar', bar: 'baz' }\n */\nexport function shallowMerge(target, source) {\n  for (const key in source) {\n    target[key] = source[key]\n  }\n}\n\n/**\n * Deep merge function that's mindful of arrays and objects\n * \n * @param {object} target The target object to merge into\n * @param {object} source The source object to merge from\n * @returns object The merged object\n * @example\n * const target = { foo: 'bar' }\n * const source = { bar: 'baz' }\n * deepMerge(target, source) // { foo: 'bar', bar: 'baz' }\n */\nexport function deepMerge(target, source) {\n  if (isObject(source) && isObject(target)) {\n    for (const key in source) {\n      target[key] = deepMerge(target[key], source[key])\n    }\n  } else if (isArray(source) && isArray(target)) {\n    for (let i = 0; i < source.length; i++) {\n      target[i] = deepMerge(target[i], source[i])\n    }\n  } else {\n    target = source\n  }\n  return target\n}\n\n/**\n * Deep clone function that's mindful of arrays and objects\n * \n * @param {object} o The object to clone\n * @returns object The cloned object\n * @example\n * const obj = { foo: 'bar' }\n * const clone = clone(obj)\n * clone.foo = 'baz'\n * console.log(obj.foo) // 'bar'\n * console.log(clone.foo) // 'baz'\n * console.log(obj === clone) // false\n * console.log(JSON.stringify(obj) === JSON.stringify(clone)) // true\n * @todo Check if faster than assign. This function is pretty old...\n */ \nexport function clone(o) {\n  let res = null\n  if (isArray(o)) {\n    res = []\n    for (const i in o) {\n      res[i] = clone(o[i])\n    }\n  } else if (isObject(o)) {\n    res = {}\n    for (const i in o) {\n      res[i] = clone(o[i])\n    }\n  } else {\n    res = o\n  }\n  return res\n}\n\n/**\n * Check if an object is empty\n * \n * @param {object} o The object to check\n * @returns boolean True if the object is empty, false otherwise\n * @example\n * isEmptyObject({}) // => true\n * isEmptyObject({ foo: 'bar' }) // => false\n */\nexport function isEmptyObject(o) {\n  for (const i in o) {\n    return false\n  }\n  return true\n}\n\n/**\n * Check if an array is empty, substitute for Array.length === 0\n * \n * @param {array} o The array to check\n * @returns boolean True if the array is empty, false otherwise\n * @example\n * isEmptyArray([]) // => true\n * isEmptyArray([1, 2, 3]) // => false\n */\nexport function isEmptyArray(o) {\n  return o.length === 0\n}\n\n/**\n * Check if a variable is empty\n * \n * @param {any} o The variable to check\n * @returns boolean True if the variable is empty, false otherwise\n * @example\n * isEmpty({}) // => true\n * isEmpty([]) // => true\n * isEmpty('') // => true\n * isEmpty(null) // => false\n * isEmpty(undefined) // => false\n * isEmpty(0) // => false\n */\nexport function isEmpty(o) {\n  if (isObject(o)) {\n    return isEmptyObject(o)\n  } else if (isArray(o)) {\n    return isEmptyArray(o)\n  } else if (isString(o)) {\n    return o === ''\n  }\n  return false\n}\n\n/**\n * Try to convert a string to a boolean\n * \n * @param {string} str The string to convert\n * @returns boolean The converted boolean or undefined if conversion failed\n * @example\n * stringToBoolean('true') // => true\n * stringToBoolean('false') // => false\n * stringToBoolean('foo') // => null\n */\nexport function stringToBoolean(str) {\n  if (/^\\s*(true|false)\\s*$/i.test(str)) return str === 'true'\n}\n\n/**\n * Try to convert a string to a number\n * \n * @param {string} str The string to convert\n * @returns number The converted number or undefined if conversion failed\n * @example\n * stringToNumber('1') // => 1\n * stringToNumber('1.5') // => 1.5\n * stringToNumber('foo') // => null\n * stringToNumber('1foo') // => null\n */\nexport function stringToNumber(str) {\n  if (/^\\s*\\d+\\s*$/.test(str)) return parseInt(str)\n  if (/^\\s*[\\d.]+\\s*$/.test(str)) return parseFloat(str)\n}\n\n/**\n * Try to convert a string to an array\n * \n * @param {string} str The string to convert\n * @returns array The converted array or undefined if conversion failed\n * @example\n * stringToArray('[1, 2, 3]') // => [1, 2, 3]\n * stringToArray('foo') // => null\n * stringToArray('1') // => null\n * stringToArray('{\"foo\": \"bar\"}') // => null\n */\nexport function stringToArray(str) {\n  if (!/^\\s*\\[.*\\]\\s*$/.test(str)) return\n  try {\n    return JSON.parse(str)\n  } catch (e) {}\n}\n\n/**\n * Try to convert a string to an object\n * \n * @param {string} str The string to convert\n * @returns object The converted object or undefined if conversion failed\n * @example\n * stringToObject('{ \"foo\": \"bar\" }') // => { foo: 'bar' }\n * stringToObject('foo') // => null\n * stringToObject('1') // => null\n * stringToObject('[1, 2, 3]') // => null\n */\nexport function stringToObject(str) {\n  if (!/^\\s*\\{.*\\}\\s*$/.test(str)) return\n  try {\n    return JSON.parse(str)\n  } catch (e) {}\n}\n\n/**\n * Try to convert a string to a regex\n * \n * @param {string} str The string to convert\n * @returns regex The converted regex or undefined if conversion failed\n * @example\n * stringToRegex('/foo/i') // => /foo/i\n * stringToRegex('foo') // => null\n * stringToRegex('1') // => null\n */\nexport function stringToRegex(str) {\n  if (!/^\\s*\\/.*\\/g?i?\\s*$/.test(str)) return\n  try {\n    return new RegExp(str)\n  } catch (e) {}\n}\n\n/**\n * Try to convert a string to a primitive\n * \n * @param {string} str The string to convert\n * @returns {null|boolean|int|float|string} The converted primitive or input string if conversion failed\n * @example\n * stringToPrimitive('null') // => null\n * stringToPrimitive('true') // => true\n * stringToPrimitive('false') // => false\n * stringToPrimitive('1') // => 1\n * stringToPrimitive('1.5') // => 1.5\n * stringToPrimitive('foo') // => 'foo'\n * stringToPrimitive('1foo') // => '1foo'\n */\nexport function stringToPrimitive(str) {\n  if (/^\\s*null\\s*$/.test(str)) return null\n  const bool = stringToBoolean(str)\n  if (bool !== undefined) return bool\n  return stringToNumber(str) || str\n}\n\n/**\n * Try to convert a string to a data type\n * \n * @param {string} str The string to convert\n * @returns any The converted data type or input string if conversion failed\n * @example\n * stringToData('null') // => null\n * stringToData('true') // => true\n * stringToData('false') // => false\n * stringToData('1') // => 1\n * stringToData('1.5') // => 1.5\n * stringToData('foo') // => 'foo'\n * stringToData('1foo') // => '1foo'\n * stringToData('[1, 2, 3]') // => [1, 2, 3]\n * stringToData('{ \"foo\": \"bar\" }') // => { foo: 'bar' }\n * stringToData('/foo/i') // => /foo/i\n */\nexport function stringToType(str) {\n  if (/^\\s*null\\s*$/.test(str)) return null\n  const bool = stringToBoolean(str)\n  if (bool !== undefined) return bool\n  return stringToNumber(str) || stringToArray(str) || stringToObject(str) || stringToRegex(str) || str\n}\n\n/**\n * If provided variable is an object\n * \n * @param {any} o \n * @returns boolean\n * @example\n * isObject({}) // => true\n * isObject([]) // => false\n * isObject(null) // => false\n */\nexport function isObject(o) {\n  return typeof o === 'object' && !Array.isArray(o) && o !== null\n}\n\n/**\n * If provided variable is an array. Just a wrapper for Array.isArray\n * \n * @param {any} o\n * @returns boolean\n * @example\n * isArray([]) // => true\n * isArray({}) // => false\n */\nexport function isArray(o) {\n  return Array.isArray(o)\n}\n\n/**\n * If provided variable is a string. Just a wrapper for typeof === 'string'\n * \n * @param {any} o\n * @returns boolean\n * @example\n * isString('foo') // => true\n * isString({}) // => false\n */\nexport function isString(o) {\n  return typeof o === 'string'\n}\n\n/**\n * If provided variable is a function, substitute for typeof === 'function'\n * \n * @param {any} o\n * @returns boolean\n * @example\n * isFunction(function() {}) // => true\n * isFunction({}) // => false\n */\nexport function isFunction(o) {\n  return typeof o === 'function'\n}\n\n/**\n * If object property is a function\n * \n * @param {object} obj\n * @param {string} propertyName\n * @returns boolean\n * @example\n * const obj = { foo: 'bar', baz: function() {} }\n * propertyIsFunction(obj, 'foo') // => false\n * propertyIsFunction(obj, 'baz') // => true\n */\nexport function propertyIsFunction(obj, propertyName) {\n  return obj.hasOwnProperty(propertyName) && isFunction(obj[propertyName])\n}\n\n/**\n * If object property is a string\n * \n * @param {object} obj\n * @param {string} propertyName\n * @returns boolean\n * @example\n * const obj = { foo: 'bar', baz: function() {} }\n * propertyIsString(obj, 'foo') // => true\n * propertyIsString(obj, 'baz') // => false\n */\nexport function propertyIsString(obj, propertyName) {\n  return obj.hasOwnProperty(propertyName) && isString(obj[propertyName])\n}\n\n/**\n * Transforms a dash-case string to camelCase\n *\n * @param {string} str\n * @returns boolean\n * @example\n * transformDashToCamelCase('foo-bar') // => 'fooBar'\n * transformDashToCamelCase('foo-bar-baz') // => 'fooBarBaz'\n * transformDashToCamelCase('foo') // => 'foo'\n * transformDashToCamelCase('fooBarBaz-qux') // => 'fooBarBazQux'\n */\nexport function transformDashToCamelCase(str) {\n  return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase() });\n}\n\n/**\n * Maps an array of objects by a property name\n * \n * @param {array} arr\n * @param {string} propertyName\n * @returns object\n * @example\n * const arr = [{ foo: 'bar' }, { foo: 'baz' }]\n * mapByProperty(arr, 'foo') // => { bar: { foo: 'bar' }, baz: { foo: 'baz' } }\n */\nexport function mapByProperty(arr, propertyName) {\n  const res = {}\n  for (let i = 0; i < arr.length; i++) {\n    res[arr[i][propertyName]] = arr[i]\n  }\n  return res\n}\n\n/**\n * Maps an array of objects by a property name to another property name\n * \n * @param {array} arr\n * @param {string} keyPropertyName\n * @param {string} valuePropertyName\n * @returns object\n * @example\n * const arr = [{ foo: 'bar', baz: 'qux' }, { foo: 'quux', baz: 'corge' }]\n * mapPropertyToProperty(arr, 'foo', 'baz') // => { bar: 'qux', quux: 'corge' }\n */\nexport function mapPropertyToProperty(arr, keyPropertyName, valuePropertyName) {\n  const res = {}\n  for (let i = 0; i < arr.length; i++) {\n    res[arr[i][keyPropertyName]] = arr[i][valuePropertyName]\n  }\n  return res\n}\n\n/**\n * Remove accents from a string\n * \n * @param {string} inputString\n * @returns string\n * @example\n * removeAccents('\u00E1\u00E9\u00ED\u00F3\u00FA') // => 'aeiou'\n * removeAccents('\u00C1\u00C9\u00CD\u00D3\u00DA') // => 'AEIOU'\n * removeAccents('se\u00F1or') // => 'senor'\n * removeAccents('\u0152') // => 'OE'\n */\nexport function removeAccents(inputString) {\n  return inputString.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').replace(/\\\u0153/g, \"oe\").replace(/\\\u00E6/g, \"ae\").normalize('NFC')\n}\n\n/**\n * Strip HTML tags from a string\n * \n * @param {string} inputString\n * @returns string\n * @example\n * stripHTMLTags('<span>foo</span>') // => 'foo'\n * stripHTMLTags('<span>foo</span> <span>bar</span>') // => 'foo bar'\n */\nexport function stripHTMLTags(inputString) {\n  return inputString.replace(/<[^>]*>/g, '')\n}\n\n/**\n * Slugify a string, e.g. 'Foo Bar' => 'foo-bar'. Similar to WordPress' sanitize_title(). Will remove accents and HTML tags.\n * \n * @param {string} str \n * @returns string\n * @example\n * slugify('Foo Bar') // => 'foo-bar'\n * slugify('Foo Bar <span>baz</span>') // => 'foo-bar-baz'\n */\nexport function slugify(str) {\n  str = str.trim().toLowerCase()\n  str = removeAccents(str)\n  str = stripHTMLTags(str)\n  return str.replace(/\\s+|\\.+|\\/+|\\\\+|\u2014+|\u2013+/g, '-').replace(/[^\\w0-9\\-]+/g, '').replace(/-{2,}/g, '-').replace(/^-|-$/g, '')\n}\n\n/**\n * Check if object has multiple properties\n * \n * @param {object} obj\n * @param {string|array} properties\n * @returns boolean\n * @example\n * const obj = { foo: 'bar', baz: 'qux' }\n * hasOwnProperties(obj, ['foo', 'baz']) // => true\n * hasOwnProperties(obj, ['foo', 'baz', 'qux']) // => false\n */\nexport function hasOwnProperties(obj, properties) {\n  if(!isArray(properties)) properties = [properties]\n  for (let i = 0; i < properties.length; i++) {\n    if (!obj.hasOwnProperty(properties[i])) return false\n  }\n  return true\n}\n\n/**\n * Finds the closest number to the set goal in an array to a given number\n * \n * @param {number} goal Number to search for\n * @param {array} arr Array of numbers to search in\n * @returns number\n * @example\n * closestNumber(10, [1, 2, 3, 4, 5, 6, 7, 8, 9]) // => 9\n * closestNumber(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) // => 9\n * closestNumber(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 9.5]) // => 9.5\n * closestNumber(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) // => 10\n */\nexport function closestNumber(goal, arr) {\n  return arr.reduce(function(prev, curr) {\n    return Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev\n  })\n}\n", "/** @module dom */\n\nimport { transformDashToCamelCase, isArray, isString } from './helpers.mjs'\n\n/**\n * Checks if an element is empty\n * \n * @param {HTMLElement} element \n * @returns boolean\n * @example\n * document.body.innerHTML = `\n *  <div id=\"empty-element\"></div>\n *  <div id=\"non-empty-element1\">foo</div>\n *  <div id=\"non-empty-element2\"><br></div>`\n * \n * isEmptyElement(document.getElementById('empty-element')) // => true\n * isEmptyElement(document.getElementById('non-empty-element1')) // => false\n * isEmptyElement(document.getElementById('non-empty-element2')) // => false\n */\nexport function isEmptyElement(element) {\n  return element.innerHTML.trim() === ''\n}\n\n/**\n * Removes all elements matching a selector from the DOM\n * \n * @param {string|HTMLElement|Element} selector The selector to select elements to remove\n * @param {HTMLElement|Element} [from=document] The element to remove elements from\n * @example\n * document.body.innerHTML = `\n * <div id=\"foo\"></div>\n * <div id=\"bar\"></div>\n * <div id=\"baz\"></div>`\n * `\n * remove('#foo, #bar') // => removes #foo and #bar\n */\nexport function remove(selector, from = document) {\n  const elements = query(selector, from)\n  for (const element of elements) {\n    element.remove()\n  }\n}\n\n/**\n * Queries the DOM for a single element and returns it. Substitutes for `document.querySelector(selector)` and JQuery's `$(selector).first()`\n * \n * @param {string|HTMLElement|Element|Array<HTMLElement|Element>|NodeList} selector The selector to select an element\n * @param {HTMLElement|Element} [from=document] The element to query from\n * @returns {HTMLElement|Element}\n * @example\n * document.body.innerHTML = `\n * <div id=\"foo\"></div>\n * <div id=\"bar\"></div>\n * <div id=\"baz\"></div>`\n * \n * querySingle('#foo') // => <div id=\"foo\"></div>\n * querySingle(document.getElementById('foo')) // => <div id=\"foo\"></div>\n * querySingle(document.querySelector('#foo')) // => <div id=\"foo\"></div>\n */\nexport function querySingle(selector, from = document) {\n  if (selector instanceof Element) return selector\n  return from.querySelector(selector)\n}\n\n/**\n * Queries the DOM for elements and returns them. Substitutes for `document.querySelectorAll(selector)` and JQuery's `$(selector)`\n * \n * @param {string|HTMLElement|Element|Array<HTMLElement|Element>|NodeList} selector The selector to select elements\n * @param {HTMLElement|Element} [from=document] The element to query from\n * @returns {Array<Element>|NodeList}\n * @example\n * document.body.innerHTML = `\n * <div id=\"foo\"></div>\n * <div id=\"bar\"></div>\n * <div id=\"baz\"></div>`\n * \n * query('#foo') // => [<div id=\"foo\"></div>]\n * query(document.getElementById('foo')) // => [<div id=\"foo\"></div>]\n * query('div') // => [<div id=\"foo\"></div>, <div id=\"bar\"></div>, <div id=\"baz\"></div>]\n */\nexport function query(selector, from = document) {\n  if (selector instanceof Array || selector instanceof NodeList) return selector\n  if (selector instanceof Element) return [selector]\n  if (from instanceof Element || from instanceof Document) return from.querySelectorAll(selector)\n  if (isString(from)) from = query(from)\n  if (!from instanceof Array  && !from instanceof NodeList) return []\n  const res = []\n  for (const element of from) {\n    res.push(...element.querySelectorAll(selector))\n  }\n  return res\n}\n\n/**\n * Sets element styles from passed object of styles. Can also transform dash-case to camelCase for CSS properties\n * \n * @param {HTMLElement} element The element to set styles on\n * @param {object} styles The object of styles to set\n * @param {boolean} transform Whether to transform dash-case to camelCase for CSS properties\n * @example\n * css(document.getElementById('foo'), { 'background-color': 'red', 'font-size': '16px' }, true) // => sets background-color and font-size\n * css(document.getElementById('foo'), { backgroundColor: 'red', fontSize: '16px' }) // => sets background-color and font-size\n */\nexport function css(element, styles, transform = false) {\n  if (!element || !styles) return\n  for (let property in styles) {\n    if (transform) property = transformDashToCamelCase(property)\n    element.style[property] = styles[property]\n  }\n}\n\n/**\n * Decodes HTML entities in a string\n * \n * @param {string} html The HTML string to decode\n * @returns {string} The decoded HTML string\n * @example\n * decodeHTML('&lt;div&gt;foo&lt;/div&gt;') // => '<div>foo</div>'\n * decodeHTML('&lt;div&gt;foo&lt;/div&gt;&lt;div&gt;bar&lt;/div&gt;') // => '<div>foo</div><div>bar</div>'\n */\nexport function decodeHTML(html) {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  const res = txt.value\n  txt.remove()\n  return res\n}\n\n/**\n * Inserts an element before another element\n * \n * @param {HTMLElement} targetElement The element to insert before\n * @param {HTMLElement} newElement The element to insert\n * @example\n * const target = document.getElementById('target')\n * const newElement = document.createElement('div')\n * newElement.id = 'newElement'\n * insertBeforeElement(target, newElement)\n * // <div id=\"newElement\"></div>\n * // <div id=\"target\"></div>\n */\nexport function insertBeforeElement(targetElement, newElement) {\n  if (!targetElement || !newElement) return\n  targetElement.parentNode.insertBefore(newElement, targetElement);\n}\n\n/**\n * Toggles an attribute value on an element\n * \n * @param {HTMLElement} element The element to toggle the attribute on\n * @param {string} attribute The attribute to toggle\n * @param {string} on Default: 'true'\n * @param {string} off Default: 'false'\n * @example\n * toggleAttributeValue(element, 'aria-expanded', 'true', 'false')\n * toggleAttributeValue(element, 'aria-expanded')\n */\nexport function toggleAttributeValue(element, attribute, on = 'true', off = 'false') {\n  if (!element.hasAttribute(attribute)) return\n\n  if (element.getAttribute(attribute) === on) {\n    element.setAttribute(attribute, off)\n  } else {\n    element.setAttribute(attribute, on)\n  }\n}\n\n/**\n * Converts a duration string to milliseconds integer\n * \n * @param {string} duration The duration string to convert, e.g. '1s', '100ms', '0.5s'\n * @returns {number} The duration in milliseconds\n * @example\n * convertToMilliseconds('1s') // 1000\n * convertToMilliseconds('100ms') // 100\n * convertToMilliseconds('0.5s') // 500\n * convertToMilliseconds('0.5') // 0\n * convertToMilliseconds('foo') // 0\n */\nexport function cssTimeToMilliseconds(duration) {\n  const regExp = new RegExp('([0-9.]+)([a-z]+)', 'i')\n  const matches = regExp.exec(duration)\n  if (!matches) return 0\n  \n  const unit = matches[2]\n  switch (unit) {\n    case 'ms':\n      return parseFloat(matches[1])\n    case 's':\n      return parseFloat(matches[1]) * 1000\n    default:\n      return 0\n  }\n}\n\n/**\n * Returns a map of transition properties and durations\n * \n * @param {HTMLElement} element The element to get the transition properties and durations from\n * @returns {object<string, number>} A map of transition properties and durations\n * @example\n * getTransitionDurations(element) // { height: 1000 } if transition in CSS is set to 'height 1s'\n * getTransitionDurations(element) // { height: 500, opacity: 1000 } if transition in CSS is set to 'height 0.5s, opacity 1s'\n */\nexport function getTransitionDurations(element) {\n  if (!element) {}\n  const styles = getComputedStyle(element)\n  const transitionProperties = styles.getPropertyValue('transition-property').split(',')\n  const transitionDurations = styles.getPropertyValue('transition-duration').split(',')\n  \n  const map = {}\n  \n  for (let i = 0; i < transitionProperties.length; i++) {\n    const property = transitionProperties[i].trim()\n    map[property] = transitionDurations.hasOwnProperty(i) ? cssTimeToMilliseconds(transitionDurations[i].trim()) : null\n  }\n  \n  return map\n}\n\n/**\n * Check a list of elements if any of them matches a selector\n * \n * @param {Array<HTMLElement>|NodeList|HTMLElement} elements The elements to check\n * @param {string} selector The selector to check\n * @returns {boolean} True if any of the elements matches the selector, false otherwise\n * @example\n * document.body.innerHTML = `\n * <div id=\"foo\"></div>\n * <div id=\"bar\"></div>\n * <div id=\"baz\"></div>`\n * \n * matchesAny(document.querySelectorAll('div'), '#foo') // => true\n * matchesAny(document.querySelectorAll('div'), '#qux') // => false\n */\nexport function matchesAny(elements, selector) {\n  if (!elements || !selector || !elements.length) return false\n  if (elements instanceof Element) elements = [elements]\n  if (isString(elements)) elements = query(elements)\n  for (const element of elements) {\n    if (element.matches(selector)) return true\n  }\n  return false\n}\n\n/**\n * Check a list of elements if all of them matches a selector\n * \n * @param {Array<HTMLElement>|NodeList|HTMLElement} elements The elements to check\n * @param {string} selector The selector to check\n * @returns {boolean} True if all of the elements matches the selector, false otherwise\n * @example\n * document.body.innerHTML = `\n * <div id=\"foo\"></div>\n * <div id=\"bar\"></div>\n * <div id=\"baz\"></div>`\n * \n * matchesAll(document.querySelectorAll('div'), 'div') // => true\n * matchesAll(document.querySelectorAll('div'), '#foo') // => false\n */\nexport function matchesAll(elements, selector) {\n  if (!elements || !selector || !elements.length) return false\n  if (elements instanceof Element) elements = [elements]\n  if (isString(elements)) elements = query(elements)\n  for (const element of elements) {\n    if (!element.matches(selector)) return false\n  }\n  return true\n}\n\n\n/**\n * Detaches an element from the DOM and returns it\n * \n * @param {HTMLElement} element The element to detach\n * @example\n * detachElement(element)\n * // => element\n * console.log(element.parentNode) // => null\n */\nexport function detachElement(element) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n  return element\n}\n\n/**\n * Gets table data from a table element, a simple regular table element, or a table like structure.\n * Useful for scraping data.\n * \n * @param {string} selector The selector to select the table element\n * @param {Array<string>|string|null} headers The headers to use for the data. If 'auto' is passed, the row containing th or the first row will be used as headers\n * @param {string} [rowSelector='tr'] The selector to select the rows\n * @param {string} [cellSelector='td'] The selector to select the cells\n * @returns {Array<object>} An array of objects with the properties as keys and the cell values as values\n * @example\n * document.body.innerHTML = `\n * <table id=\"table\">\n *  <thead>\n *   <tr>\n *   <th>Foo</th>\n *  <th>Bar</th>\n * </tr>\n * </thead>\n * <tbody>\n * <tr>\n * <td>Foo 1</td>\n * <td>Bar 1</td>\n * </tr>  \n * <tr>\n * <td>Foo 2</td>\n * <td>Bar 2</td>\n * </tr>\n * </tbody>\n * </table>`\n * \n * getTableData('#table', ['foo', 'bar'])\n * // => [\n * //  { foo: 'Foo 1', bar: 'Bar 1' },\n * //  { foo: 'Foo 2', bar: 'Bar 2' }\n * // ]\n */\nexport function getTableData(selector, headers, rowSelector = 'tr', cellSelector = 'td', headerCellSelector = 'th') {\n  const table = typeof selector === 'string' ? document.querySelector(selector) : selector\n  const res = []\n  const rows = table.querySelectorAll(rowSelector)\n  let start = 0\n\n  function iterateHeaders(arr) {\n    if (!arr || !arr.length) return\n    const res = []\n    for (let i = 0; i < arr.length; i++) {\n      res.push(arr[i].textContent.trim())\n    }\n    return res\n  }\n\n  if (headers && isString(headers) && headers === 'auto') {\n    let headerCells = table.querySelectorAll(headerCellSelector)\n    \n    if (headerCells && headerCells.length) {\n      headers = iterateHeaders(headerCells)\n    } else {\n      headers = iterateHeaders(rows[0].querySelectorAll(cellSelector))\n      start = 1\n    }\n  }\n\n  for (let i = start; i < rows.length; i++) {\n    const row = rows[i]\n    const cells = row.querySelectorAll(cellSelector)\n    if (!cells || !cells.length) continue\n\n    let rowData = []\n    if (headers && isArray(headers) && headers.length) {\n      rowData = {}\n      for (let j = 0; j < headers.length; j++) {\n        rowData[headers[j]] = cells[j] ? cells[j].textContent.trim() : null\n      }\n    } else {\n      for (let j = 0; j < cells.length; j++) {\n        rowData.push(cells[j].textContent.trim())\n      }\n    }\n    res.push(rowData)\n  }\n  return res\n}\n\n/**\n * Parses HTML string to a DOM Node\n * \n * @param {string} html The HTML string to parse\n * @returns {Node} The parsed DOM Node\n * @example\n * parseDOM('<div>foo</div>')\n */\nexport function parseDOM(html) {\n  const parser = new DOMParser()\n  const doc = parser.parseFromString(html, 'text/html')\n  return doc.body.firstChild\n}\n\n/**\n * Loads an image form a provided source url and calls a callback when it's loaded\n * \n * @param {string} src The source url of the image\n * @param {Function} [callback] The callback to call when the image is loaded\n * @example\n * loadImage('https://example.com/image.png', () => {\n *  console.log('Image loaded')\n * })\n */\nexport function loadImage(src, callback) {\n  const img = new Image()\n  if (callback)\n    img.addEventListener('load', callback, false);\n  img.src = src\n}\n", "/** @module browser */\n\nimport { isFunction } from './helpers.mjs'\nimport { css } from './dom.mjs'\n\nexport function isUserAgentIOS(str) {\n  return /iPad|iPhone|iPod/i.test(str)\n}\n\nexport function isUserAgentMobile(str) {\n  return /\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(str) ||\n    /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(str)\n}\n\nexport function isUserAgentSafari(str) {\n  return /^((?!chrome|android|crios|fxios).)*safari/i.test(str)\n}\n\n/**\n * Check if the device is an iOS device\n * \n * @returns boolean True if the device is an iOS device, false otherwise\n */\nexport function isIOS() {\n  return isUserAgentIOS(navigator.userAgent) && 'maxTouchPoints' in navigator && navigator.maxTouchPoints > 1\n}\n\n/**\n * Check if the device is a mobile device\n * \n * @returns boolean True if the device is a mobile device, false otherwise\n */\nexport function isMobile() {\n  if ('maxTouchPoints' in navigator) return navigator.maxTouchPoints > 0\n\n  if ('matchMedia' in window) return !!matchMedia('(pointer:coarse)').matches\n\n  if ('orientation' in window) return true\n\n  return isUserAgentMobile(navigator.userAgent)\n}\n\n/**\n * Check if the browser is Safari\n *\n * @returns boolean True if the browser is Safari, false otherwise\n */\nexport function isSafari() {\n  if (navigator.hasOwnProperty('vendor')) /apple/i.test(navigator.vendor)\n  return isUserAgentSafari(navigator.userAgent)\n}\n\n/**\n * Check if the browser is Safari on iOS\n * \n * @returns boolean True if the browser is Safari on iOS, false otherwise\n */\nexport function isIOSSafari() {\n  return isIOS() && isSafari()\n}\n\n/**\n * A wrapper for the matchMedia function, cause with `matchMedia` you can only either add a listener or check the media query\n * this function does both.\n * \n * @param {string} query The media query to check\n * @param {function} [callback] The callback function to call when the media query changes\n * @returns {boolean} The result of the media query\n * \n * @example\n * mediaMatcher('(min-width: 768px)', (matches) => {\n *  if (matches) {\n *    // Do something\n *  } else {\n *    // Do something else\n *  }\n * })\n * \n * // Or\n * \n * const isDesktop = mediaMatcher('(min-width: 768px)')\n */\nexport function mediaMatcher(query, callback) {\n  if (isFunction(callback)) {\n    matchMedia(query).addEventListener('change', (e) => {\n      callback(e.matches)\n    })\n\n    const mql = matchMedia(query)\n    callback(mql.matches)\n\n    return mql.matches\n  }\n\n  return matchMedia(query).matches\n}\n\n/**\n * Get the scrollbar width\n * \n * When preventing scroll with html overflow hidden the scroll bar will disappear and the whole page will shift (if the scroll bar is visible that is).\n * To substitute for the scrollbar width we can add a padding to the body element.\n * \n * @returns {number} The scrollbar width\n * \n * @example\n * const scrollbarWidth = getScrollbarWidth() // 15 (on MacOS X Safari)\n */\nexport function getScrollbarWidth() {\n  const scrollDiv = document.createElement('div')\n  \n  css(scrollDiv, {\n    width: '100px',\n    height: '100px',\n    position: 'absolute',\n    left: '-9999px',\n    zIndex: '0',\n    overflowX: 'hidden',\n    overflowY: 'scroll'\n  })\n\n  document.body.appendChild(scrollDiv)\n  const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n  document.body.removeChild(scrollDiv)\n  return scrollbarWidth\n}\n\n/**\n * Disable the scroll on the page.\n * \n * @param {number} [shift=0] The amount of pixels to substitute for the scrollbar width, getScrollbarWidth() is used to provide this value\n */\nexport function disableScroll(shift = 0) {\n  const body = document.body\n  body.style.overflow = 'hidden'\n  body.style.paddingRight = `${shift}px`\n}\n\n/**\n * Enable the scroll on the page.\n * \n * @param {number} [shift=0] The amount of pixels to substitute for the scrollbar width, getScrollbarWidth() is used to provide this value\n */\nexport function enableScroll(shift = 0) {\n  const body = document.body\n  body.style.overflow = ''\n  if (shift) body.style.paddingRight = ''\n}\n", "import { getScrollbarWidth, disableScroll, enableScroll, shallowMerge, parseDOM, stringToType, css, isString, detachElement } from \"book-of-spells\"\n\nexport class Modal {\n  constructor(id, contentElement, options = {}, modallyInstance) {\n    this.id = id\n    this.element = contentElement\n    this.modallyInstance = modallyInstance\n\n    const landing = this.options.landing instanceof HTMLElement ? this.options.landing : document.querySelector(this.options.landing)\n    if (!landing) return\n\n    // https://www.youtube.com/watch?v=gJ-WmYn_9GE\n    this.videoRegEx = {};\n    this.videoRegEx.YOUTUBE = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/ ]{11})/i;\n    this.videoRegEx.VIMEO = /(?:www\\.|player\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^\\/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:[a-zA-Z0-9_\\-]+)?/i;\n    this.videoRegEx.VIDEO = /(.*\\/[^\\/]+\\.mp4|ogg|ogv|ogm|webm|avi)\\s?$/i;\n    //TODO: add support for brightcove and cloudfront\n    //TODO: automatic video modal detection\n\n    this.scrollWidth = getScrollbarWidth();\n\n    this.options = {\n      'landing': 'body',\n      'max-width': 'none',\n      'classes': '',\n      'vertical-align': 'middle',\n      'close-parent': false,\n      'close-other': false,\n      'image': false,\n      'video': false,\n      'autoplay': true,\n      'template': '<div class=\"modally-wrap\"><div class=\"modally-table\"><div class=\"modally-cell\"><div class=\"modally-underlay modally-close\"></div><div class=\"modally\" role=\"dialog\" aria-modal=\"true\"><button tabindex=\"1\" class=\"modally-close modally-close-button\">&times;</button><div class=\"modally-content\"></div></div></div></div></div>',\n      'in-duration': 'normal',\n      'in-easing': 'swing',\n      'out-duration': 'normal',\n      'out-easing': 'swing',\n      'in-css': null, //TODO: css animation\n      'out-css': null //TODO: css animation\n    }\n\n    shallowMerge(this.options, options);\n\n    if (this.element) {\n      for (const k in this.options) {\n        if (this.element.hasAttribute(`modally-${k}`)) {\n          this.options[k] = stringToType(this.element.getAttribute(`modally-${k}`))\n        }\n      }\n    }\n\n    this.template = parseDOM(this.options.template)\n    this.template.setAttribute('modally-id', this.id)\n    this.element.setAttribute('modally-id', this.id)\n\n    const modallyElement = this.template.querySelector('.modally')\n    if (modallyElement) {\n      css(modallyElement, {\n        'maxWidth': this.options['max-width']\n      })\n    }\n\n    const modallyCellElement = this.template.querySelector('.modally-cell')\n    if (modallyCellElement) {\n      css(modallyCellElement, {\n        'verticalAlign': this.options['vertical-align']\n      })\n    }\n\n    this.template.classList.add(this.options.classes)\n\n    // Setup modal types\n\n    // TODO: maybe image lightbox - you have the old code you did for a mexican guy in 2012\n    // TODO: responsive triggers (needs deep extend) ???\n    // TODO: iframe modal\n\n    if (this.options.video) this.setupVideoLanding()\n    else if (this.options.image) this.setupImageLanding()\n    else {\n      if (this.element) {\n        const ghost = detachElement(this.element)\n        this.template.querySelector('.modally-content').appendChild(ghost)\n      }\n    }\n\n    if (this.element && this.element.classList.contains('modally-init')) {\n      this.element.classList.remove('modally-init')\n      this.modallyInstance.open(this)\n    }\n\n    this.template.querySelectorAll('.modally-close').forEach((el) => {\n      el.addEventListener('click', (e) => {\n        e.preventDefault()\n        this.modallyInstance.close(this)\n      })\n    })\n\n    this.template.classList.add(id)\n    landing.appendChild(this.template)\n    \n    this.zIndex = window.getComputedStyle(this.template).zIndex\n  }\n\n  setupVideoLanding() {\n    const spacer = parseDOM('<svg aria-hidden=\"true\" style=\"width: 100%; height: auto; display: block;\" width=\"1920\" height=\"1080\"></svg>')\n\n    const ymod = this.options.autoplay ? 'autoplay=1&amp;' : ''\n    const vmod = this.options.autoplay ? 'autoplay=1' : ''\n    const vidmod = this.options.autoplay ? ' autoplay' : ''\n\n    const embeds = parseDOM(`\n      <iframe hidden class=\"youtube embed-template template\" data-src=\"https://www.youtube.com/embed/{ID}?${ymod}autohide=1&amp;fs=1&amp;rel=0&amp;hd=1&amp;wmode=opaque&amp;enablejsapi=1\" type=\"text/html\" width=\"1920\" height=\"1080\" allow=\"autoplay\" frameborder=\"0\" vspace=\"0\" hspace=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen=\"\" scrolling=\"auto\"></iframe>\n      <iframe hidden class=\"vimeo embed-template template\" title=\"vimeo-player\" data-src=\"https://player.vimeo.com/video/{ID}?${vmod}\" type=\"text/html\" width=\"1920\" height=\"1080\" allow=\"autoplay; allowfullscreen\" rameborder=\"0\" allowfullscreen=\"\"></iframe>\n      <video hidden height=\"1920\" width=\"1080\" class=\"video embed-template template\" data-src=\"{ID}\" controls playsinline${vidmod}></video>\n    `)\n\n    const landing = parseDOM('<div class=\"iframe-landing\"></div>')\n    landing.appendChild(spacer)\n    this.template.querySelector('.modally-content').appendChild(landing)\n    this.template.appendChild(embeds)\n    this.template.classList.add('video-embed')\n  }\n\n  setupImageLanding() {\n    const spacer = parseDOM('<div class=\"image-landing\"><img style=\"width: 100%; height: auto;\" decoding=\"async\" loading=\"lazy\" alt=\"\"></div>')\n    this.template.querySelector('.modally-content').appendChild(spacer)\n    this.template.classList.add('image-embed')\n  }\n\n  open(callback) {\n    \n  }\n}\n\nexport class Modally {\n  constructor() {\n    this.index = {}\n    this.opened = []\n\n    document.addEventListener('click', (e) => {\n      const target = e.target\n      if (!target.matches('[target=\"_modal\"]:not([disabled]), [target=\"_modal:open\"]:not([disabled]), [target=\"_modal:close\"]:not([disabled])')) return\n      const href = target.getAttribute('href')\n\n      if (href && href.length && href !== '#') {\n        const modal = this.get(href.replace('#', ''))\n        if (modal) {\n          e.preventDefault()\n          if (target.matches('[target=\"_modal:close\"]')) return this.close(modal)\n          this.open(modal)\n        }\n      }\n    })\n\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        this.close()\n      }\n    })\n  }\n\n  modallyHashCheck() {\n    if (window.location.hash !== ''\n      && window.location.hash !== '#') {\n      const href = window.location.hash.replace('#', '')\n\n      if (this.index.hasOwnProperty(href)) {\n        this.open(href)\n      }\n    }\n  }\n\n  add(id, selector, options = {}) {\n    const element = isString(selector) ? document.querySelector(selector) : selector\n\n    if (!element) {\n      console.error(`Modally: Element with selector \"${selector}\" not found`)\n      return\n    }\n\n    this.index[id] = new Modal(id, element, options, this)\n  }\n\n  get(id) {\n    return this.index[id]\n  }\n\n  open(id, callback) {\n    const modal = id instanceof Modal ? id : this.get(id)\n    if (!modal) return\n    modal.open(callback)\n    this.opened.push(modal)\n    css(modal.template, {\n      'zIndex': modal.zIndex + this.opened.length\n    })\n  }\n\n  close(id, callback) {\n    if (!id && this.opened.length) {\n      id = this.opened[this.opened.length - 1]\n    }\n\n    const modal = id instanceof Modal ? id : this.get(id)\n    if (!modal) return\n    modal.close(callback)\n    this.opened.pop()\n    css(modal.template, {\n      'zIndex': modal.zIndex\n    })\n  }\n\n  // Only after registering all modals\n  initHashCheck() {\n    this.modallyHashCheck()\n\n    window.addEventListener('hashchange', () => {\n      this.modallyHashCheck()\n    })\n  }\n}\n\n/**\n\n    var Modally = function(id, elem, params) {\n\n    };\n\n    //XXX: This code sucks - REFACTOR\n    Modally.prototype.open = function(e, callback) {\n        var $parent_modally = null;\n\n    if (e && !e.hasOwnProperty('currentTarget')) {\n      e  = $(e);\n    }\n\n    if (e && e.hasOwnProperty('currentTarget')) {\n      $parent_modally = $(e.currentTarget).closest('.modally-wrap');\n    } else {\n      $parent_modally = $(e).closest('.modally-wrap'); //XXX: ???\n    }\n\n        var self = this;\n        $('body').addClass('modally-open modally-'+this.id);\n\n        $('.modally-wrap.open').removeClass('last');\n        this.$template.addClass('open last');\n\n        function run_open(e, self) {\n            if (self.params.video) {\n                var link = null;\n\n        if (e && e.hasOwnProperty('currentTarget')) {\n          link = $(e.currentTarget).data('video');\n        } else {\n          var url_pts = /video=([^&]+)/gi.exec(window.location.hash);\n          if (url_pts && url_pts.length && url_pts[1] !== '') {\n            link = url_pts[1];\n          }\n        }\n\n                var pts = [];\n                var link_type = null;\n\n          for (var k in window._modally_video_re) {\n            var reg = window._modally_video_re[k];\n\n            var pts_tmp = reg.exec(link);\n\n            if (pts_tmp && pts_tmp.length && pts_tmp[1] !== '') {\n               pts = pts_tmp;\n              link_type = k;\n              break;\n            }\n\n          reg.lastIndex = 0;\n          }\n\n                if (pts && pts.length) {\n                    var id = pts[1];\n                    var $temp = self.$template.find('.embed-template.template.'+link_type.toLowerCase()).clone();\n                    $temp.removeClass('template');\n                    $temp.show();\n                    var srctemp = $temp.data('src');\n                    var src = srctemp.replace('{ID}', id);\n                    $temp.attr('src', src);\n                    self.$template.find('.iframe-landing').append($temp);\n                }\n            }\n\n            if (self.params.image) {\n              link = $(e.currentTarget).data('image');\n              self.$template.find('.image-landing img').attr('src', link);\n            }\n\n            $('html, .modally-wrap').disableScroll();\n\n            if (window.hasOwnProperty('iNoBounce')) {\n                iNoBounce.enable();\n            }\n\n            if (self.$element.length) {\n                self.$element.trigger('modally:opening', e, self);\n            }\n            self.$template.trigger('modally:opening', e, self);\n            $(document).trigger('modally:opening:'+self.id, [e, self]);\n\n            self.$template.stop(true).fadeIn(self.params['in-duration'], self.params['in-easing'], function(){\n                if (self.$element.length) {\n                    self.$element.trigger('modally:opened', e, self);\n                }\n                self.$template.trigger('modally:opened', e, self);\n                $(document).trigger('modally:opened:'+self.id, [e, self]);\n\n                if (callback && typeof callback === 'function') {\n                    callback();\n                }\n            });\n        }\n\n        if ($parent_modally.length) {\n            var data = $parent_modally.data('modally');\n\n            if (this.params.close_parent) {\n                data.close(e, function() {\n                    run_open(e, self);\n                });\n                return this;\n            }\n\n            this.temp_parent = data;\n            this.$template.css('z-index', data.initial_z_index + 1);\n        }\n\n        run_open(e, this);\n\n        return this;\n    };\n\n    Modally.prototype.close = function(e, callback) {\n        var self = this;\n\n        if (this.$element.length) {\n            this.$element.trigger('modally:closing', e, this);\n        }\n        this.$template.trigger('modally:closing', e, this);\n        $(document).trigger('modally:closing:'+this.id, [e, this]);\n\n        this.$template.stop(true).fadeOut(self.params['out-duration'], self.params['out-easing'], function() {\n            if (self.$element.length) {\n                self.$element.trigger('modally:closed', e, self);\n            }\n            self.$template.trigger('modally:closed', e, self);\n            $(document).trigger('modally:closed:'+self.id, [e, self]);\n\n            if (callback && typeof callback === 'function') {\n                callback();\n            }\n        });\n\n        $('html, .modally-wrap').enableScroll();\n\n        if (window.hasOwnProperty('iNoBounce')) {\n            iNoBounce.disable();\n        }\n        this.$template.removeClass('open');\n\n        if (this.$template.hasClass('last') && this.temp_parent) {\n            this.temp_parent.$template.addClass('last');\n            this.$template.removeClass('last');\n            delete this.temp_parent;\n        }\n\n        if (!$('.modally-wrap.open').length) {\n            $('.modally-wrap').removeClass('last');\n            $('body').removeClass('modally-open');\n        }\n\n        if (this.params.video) {\n            this.$template.find('.iframe-landing iframe, .iframe-landing video').remove();\n        }\n\n        \n        //if (this.params.image) {\n        //  this.$template.find('.image-landing img').removeAttr('src');\n        //}\n\n        if (this.initial_z_index !== this.$template.css('z-index')) {\n            this.$template.css('z-index', this.initial_z_index);\n        }\n\n\n        $('body').removeClass('modally-'+this.id);\n\n        return this;\n    };\n    */\n\n    export default Modally\n", "import Modally from \"../modally.mjs\";\n\nif (!window.Modally) {\n  window.Modally = Modally;\n}\n"],
  "mappings": "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",
  "names": []
}
